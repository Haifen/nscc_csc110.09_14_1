#!/bin/env python

# $Header: nscc_csc110_201409/lab04/kauffman_L4_2.py, r1 201410161828 US/Pacific-New PDT UTC-0700 robink@northseattle.edu Lab $

## Count the number of even integers given a series fed from stdin (should be a set, not a list)

import functools, operator, re

i_no_regexp = re.compile("^(\d+)?(n)?.*", re.I)

cont = True
iset = set()
odds = set()
while(cont):
  s_entry = input("Please enter a number: ")
  s_match = i_no_regexp.match(s_entry)
  if(s_match.group(2)):
    print("Thank you, here is your tally:")
    iset_str = map(str, iset)
    print("Numbers entered:", ", ".join(iset_str))
    evens = list(filter((lambda num: not num & 1), iset)) # Iterator generated by filter() has to be cast to a list for the .__iter__(.__next__) elements to be consumed.  Why it can't simply be passed around as a valid sequential object or (if we were to use a functional approach) a lazy sequence is beyond me.
    evens_str = map(str, evens)
    print("Even numbers in that set:", ", ".join(evens_str))
    total = functools.reduce(operator.add, evens)
    print("Sum of even numbers in the set: {0}".format(total))
    print("Total number of even elements: {0}".format(len(evens)))
    cont = False # Could also use break here
  else:
    iset |= {int(s_match.group(1))}


